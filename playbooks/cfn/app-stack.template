AWSTemplateFormatVersion: '2010-09-09'
Description: Open edX App stack

Parameters:
  ProjectTag:
    Description: For tracking AWS expenses by project (constant)
    Default: openedx
    Type: String
  VPC:
    Description: VPC to use
    Type: "AWS::EC2::VPC::Id"
  BaseAMI:
    Description: ID of Open edX server base AMI
    Type: String
  UniversityShortName:
    Description: Member University short identifier
    Type: String
  AltName:
    Description: Used to avoid conflict with URL of existing Open edX deployment
    Type: String
  HZName:
    Description: Name of hosted zone for Route 53 Record Set
    Type: String
  AppSecurityGroupId:
    Description: app server's security group id
    Type: String
  ElbSecurityGroupId:
    Description: load balancer's security group id
    Type: String
  SSLCertificateARN:
    Description: ARN of SSL certificate to use for this stack
    Type: String

Resources:
  EdxAppInstance: 
    Type: "AWS::EC2::Instance"
    Metadata:
      # For reference see:
      # https://stackoverflow.com/questions/39760158/ubuntu-could-not-enable-service-cfn-hup
      AWS::CloudFormation::Init:
        config:
          files:
            # cfn-hup configuration
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: 000400
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EdxAppInstance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource EdxAppInstance --region ${AWS::Region}
                runas=root

          services: 
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties: 
      InstanceType: "t2.medium"
      ImageId: !Sub "${BaseAMI}"
      KeyName: "openedx-staging"
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            VolumeSize: "16"
      SecurityGroupIds: 
        - !Sub ${AppSecurityGroupId}
      Tags:
        - Key: Name
          Value: !Sub openedx-${UniversityShortName}-app
        - Key: Project
          Value: !Sub ${ProjectTag}
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            chmod +x /etc/init.d/cfn-hup
            update-rc.d cfn-hup defaults
            service cfn-hup start
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource EdxAppInstance --region ${AWS::Region}
            /usr/local/bin/cfn-signal --success true --stack ${AWS::StackName} --resource EdxAppInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName:
        !Sub openedx-${UniversityShortName}
      AvailabilityZones:
        Fn::GetAZs: ''
      Scheme:
        internet-facing
      SecurityGroups:
        - !Sub ${ElbSecurityGroupId}
      Instances:
      - Ref: EdxAppInstance
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
        InstanceProtocol: HTTP
      - LoadBalancerPort: '443'
        InstancePort: '443'
        Protocol: HTTPS
        InstanceProtocol: HTTPS
        SSLCertificateId: !Sub ${SSLCertificateARN}
      - LoadBalancerPort: '18010'
        InstancePort: '18010'
        Protocol: HTTP
        InstanceProtocol: HTTP
      - LoadBalancerPort: '48010'
        InstancePort: '48010'
        Protocol: HTTPS
        InstanceProtocol: HTTPS
        SSLCertificateId: !Sub ${SSLCertificateARN}
      HealthCheck:
        Target: 'HTTPS:443/'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '5'
        Timeout: '2'
      Tags:
        - Key: Project
          Value: !Sub ${ProjectTag}
    DependsOn: EdxAppInstance
  OpenEdxRoute53:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName: !Sub ${HZName}
      RecordSets:
      - Name:
          Fn::Join:
            - ''
            - - !Ref AltName
              - '.'
              - !Ref HZName
        Type: CNAME
        TTL: '900'
        ResourceRecords:
        - !GetAtt ElasticLoadBalancer.DNSName
      - Name:
          Fn::Join:
            - ''
            - - !Ref AltName
              - '-preview'
              - '.'
              - !Ref HZName
        Type: CNAME
        TTL: '900'
        ResourceRecords:
        - !GetAtt ElasticLoadBalancer.DNSName
    DependsOn: ElasticLoadBalancer

Outputs:
  EdxAppIp:
    Value: !GetAtt EdxAppInstance.PrivateIp
