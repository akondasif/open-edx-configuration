# Create Open edX data stack
#
# Usage:
#   ansible-playbook -vvvv create_stacks.yml -e short_name=... -e bypass=...
#     bypass is an optional parameter, its default value is short_name
---
- hosts: localhost
  vars_files:
    - [ "params/{{ short_name }}.yml", "params/unizin.yml" ]
  tasks:
    - name: default value for optional bypass parameter
      set_fact:
        bypass: "{{ short_name }}"
      when: bypass is undefined

    - name: set DOMAIN, PREVIEWURL, and S3ST0RAGEBUCKET
      set_fact:
        DOMAIN: "openedx-{{ bypass }}.{{ hosted_zone_name }}"
        PREVIEWURL: "openedx-preview-{{ bypass }}.{{ hosted_zone_name }}"
        S3STORAGEBUCKET: "unizin-openedx-{{ bypass }}"

    - name: create Open edX Security stack
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-Security"
        region: "us-east-1"
        state: "present"
        template: "cfn/security-stack.template"
        template_parameters:
          VPC: "vpc-2ec89b4b"
          UniversityShortName: "{{ short_name }}"
          BuildServerSecurityGroupId: "{{ build_sg }}"
        tags:
          Stack: "Open-edX-{{ full_name }}-Security"
          Project: "openedx"
      register: "security_stack"

    - name: create MySQL RDS
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-RDS"
        region: "us-east-1"
        state: "present"
        template: "cfn/rds-stack.template"
        template_parameters:
          UniversityShortName: "{{ short_name }}"
          DBUser: "root"
          DBPassword: "password"
          RdsAllocatedStorage: 5
          RdsSecurityGroupId: "{{ security_stack.stack_outputs.RdsSecurityGroup }}"
        tags:
          Stack: "Open-edX-{{ full_name }}-RDS"
          Project: "openedx"
      register: "rds_stack"

    - name: create Open edX data servers
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-DataServers"
        region: "us-east-1"
        state: "present"
        template: "cfn/data-stack.template"
        template_parameters:
          VPC: "vpc-2ec89b4b"
          UniversityShortName: "{{ short_name }}"
          MongoSecurityGroupId: "{{ security_stack.stack_outputs.MongoServerSecurityGroup }}"
          CommonSecurityGroupId: "{{ security_stack.stack_outputs.CommonServerSecurityGroup }}"
          BaseAMI: "ami-fb3232ed"
        tags:
          Stack: "Open-edX-{{ full_name }}-DataServers"
          Project: "openedx"
      register: "data_stack"

    - name: create Open edX app server
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-AppServers"
        region: "us-east-1"
        state: "present"
        template: "cfn/app-stack.template"
        template_parameters:
          VPC: "vpc-2ec89b4b"
          HZName: "{{ hosted_zone_name }}"
          UniversityShortName: "{{ short_name }}"
          AltName: "{{ bypass }}"
          AppSecurityGroupId: "{{ security_stack.stack_outputs.AppServerSecurityGroup }}"
          ElbSecurityGroupId: "{{ security_stack.stack_outputs.ElbSecurityGroup }}"
          BaseAMI: "ami-fb3232ed"
          SSLCertificateARN: "arn:aws:acm:us-east-1:154191975022:certificate/753b27e6-b2ba-47b6-b2c1-fbd55ab166a9"
        tags:
          Stack: "Open-edX-{{ full_name }}-AppServers"
          Project: "openedx"
      register: "app_stack"


    - name: set variables for server ips
      set_fact:
        edxapp: "{{ app_stack.stack_outputs.EdxAppIp }}"
        mongo1: "{{ data_stack.stack_outputs.MongoPrimaryIp }}"
        mongo2: "{{ data_stack.stack_outputs.MongoSecondaryIp }}"
        common: "{{ data_stack.stack_outputs.CommonServerIp }}"
        env_source: "/tmp/env.sh"
        env_yml: "/tmp/env.yml"

    - name: delete file if it already exists
      file:
        dest: "{{ env_source }}"
        state: absent

    - name: delete file if it already exists
      file:
        dest: "{{ env_yml }}"
        state: absent

    - name: create file
      file:
        dest: "{{ env_source }}"
        state: touch

    - name: create file
      file:
        dest: "{{ env_yml }}"
        state: touch

    - blockinfile:
        dest: "{{ env_source }}"
        block:  |
          export DOMAIN={{ DOMAIN }}
          export PREVIEWURL={{ PREVIEWURL }}
          export S3STORAGEBUCKET={{ S3STORAGEBUCKET }}
          export EDXAPP_AWS_ACCESS_KEY_ID={{ EDXAPP_AWS_ACCESS_KEY_ID }}
          export EDXAPP_AWS_SECRET_ACCESS_KEY={{ EDXAPP_AWS_SECRET_ACCESS_KEY }}
          export EMAIL_HOST_USER={{ EMAIL_HOST_USER }}
          export EMAIL_HOST_PASSWORD={{ EMAIL_HOST_PASSWORD }}
          export APP={{ edxapp }}
          export MONGO1={{ mongo1 }}
          export MONGO2={{ mongo2 }}
          export COMMON={{ common }}
          export ELASTIC={{ common }}
          export RABBIT={{ common }}
          export RDS={{ rds_stack.stack_outputs.RdsEndpointAddress }}
        insertafter: EOF

    - blockinfile:
        dest: "{{ env_yml }}"
        block: |
          DOMAIN: {{ DOMAIN }}
          PREVIEWURL: {{ PREVIEWURL }}
          S3STORAGEBUCKET: {{ S3STORAGEBUCKET }}
          EDXAPP_AWS_ACCESS_KEY_ID: {{ EDXAPP_AWS_ACCESS_KEY_ID }}
          EDXAPP_AWS_SECRET_ACCESS_KEY: {{ EDXAPP_AWS_SECRET_ACCESS_KEY }}
          APP: {{ edxapp }}
          MONGO1: {{ mongo1 }}
          MONGO2: {{ mongo2 }}
          COMMON: {{ common }}
          ELASTIC: {{ common }}
          RABBIT: {{ common }}
          RDS: {{ rds_stack.stack_outputs.RdsEndpointAddress }}
        insertafter: EOF


    - name: delete file if it already exists
      file:
        dest: /tmp/hosts
        state: absent

    - name: create file
      file:
        dest: /tmp/hosts
        state: touch

    - blockinfile:
        dest: /tmp/hosts
        block: |

          {{ mongo1 }} mongo1
          {{ mongo2 }} mongo2
          {{ common }} elastic rabbit
        insertafter: EOF

    - add_host:
        name: "{{ edxapp }}"
        groups: nonlocal

    - add_host:
        name: "{{ mongo1 }}"
        groups: nonlocal

    - add_host:
        name: "{{ mongo2 }}"
        groups: nonlocal

    - add_host:
        name: "{{ common }}"
        groups: nonlocal

    - name: Wait for SSH to mongo1 to come up
      wait_for: host={{ mongo1 }} port=22 delay=60 timeout=320 state=started

    - name: Wait for SSH to mongo2 to come up
      wait_for: host={{ mongo2 }} port=22 delay=60 timeout=320 state=started

    - name: Wait for SSH to common to come up
      wait_for: host={{ common }} port=22 delay=60 timeout=320 state=started

    - name: Wait for SSH to edxapp to come up
      wait_for: host={{ edxapp }} port=22 delay=60 timeout=320 state=started


    - name: set variable for new relic license key
      set_fact:
        NEWRELIC_LICENSE_KEY: "{{ NEWRELIC_LICENSE_KEY }}"


- name: install and configure New Relic Infrastructure
  hosts: nonlocal
  become: yes
  vars:
    software_key_prefix: "openedx-{{ short_name }}.testing.unizin.org"
    environment_name: dev
    NEWRELIC_LICENSE_KEY: "{{ hostvars['localhost']['NEWRELIC_LICENSE_KEY'] }}"
  roles:
    - newrelic-infra-unizin


- hosts: nonlocal
  vars:
    ansible_ssh_private_key_file: "/home/ubuntu/openedx-staging.pem"
    filepath: "{{ hostvars['localhost']['env_source'] }}"
  tasks:
    - name: copy file
      copy:
        src: "{{ filepath }}"
        dest: "{{ filepath }}"
...
