# Create Open edX data stack
#
# Usage:
#   ansible-playbook -vvvv create_stacks.yml -e env=... -e short_name=... -e bypass=...
#     bypass is an optional parameter, its default value is short_name
---
- hosts: localhost
  vars_files:
    - [ "params/{{ short_name }}-{{ env }}.yml", "params/unizin-dev.yml" ]
  tasks:
    - name: default value for optional bypass parameter
      set_fact:
        bypass: "{{ short_name }}"
      when: bypass is undefined

    - name: set DOMAIN, PREVIEWURL, and S3ST0RAGEBUCKET
      set_fact:
        DOMAIN: "{{ bypass }}.{{ hosted_zone_minus_period }}"
        PREVIEWURL: "{{ bypass }}-preview.{{ hosted_zone_minus_period }}"
        S3STORAGEBUCKET: "unizin-{{ env }}-openedx-{{ bypass }}"

    - name: create Open edX Security stack
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-Security"
        region: "us-east-1"
        state: "present"
        template: "cfn/security-stack.template"
        template_parameters:
          VPC: "{{ vpc }}"
          UniversityShortName: "{{ short_name }}"
          BuildServerSecurityGroupId: "{{ build_sg }}"
        tags:
          Stack: "Open-edX-{{ full_name }}-Security"
          Project: "openedx"
      register: "security_stack"

    - name: create MySQL RDS
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-RDS"
        region: "us-east-1"
        state: "present"
        template: "cfn/rds-stack.template"
        template_parameters:
          UniversityShortName: "{{ short_name }}"
          DBUser: "{{ MYSQL_ADMIN_USER }}"
          DBPassword: "{{ MYSQL_ADMIN_PASSWORD }}"
          RdsAllocatedStorage: 5
          RdsSecurityGroupId: "{{ security_stack.stack_outputs.RdsSecurityGroup }}"
        tags:
          Stack: "Open-edX-{{ full_name }}-RDS"
          Project: "openedx"
      register: "rds_stack"

    - name: create Open edX data servers
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-DataServers"
        region: "us-east-1"
        state: "present"
        template: "cfn/data-stack.template"
        template_parameters:
          VPC: "{{ vpc }}"
          UniversityShortName: "{{ short_name }}"
          MongoSecurityGroupId: "{{ security_stack.stack_outputs.MongoServerSecurityGroup }}"
          CommonSecurityGroupId: "{{ security_stack.stack_outputs.CommonServerSecurityGroup }}"
          BaseAMI: "{{ base_ami }}"
        tags:
          Stack: "Open-edX-{{ full_name }}-DataServers"
          Project: "openedx"
      register: "data_stack"

    - name: create Open edX app server
      cloudformation:
        stack_name: "Open-edX-{{ full_name }}-AppServers"
        region: "us-east-1"
        state: "present"
        template: "cfn/app-stack.template"
        template_parameters:
          VPC: "{{ vpc }}"
          HZName: "{{ hosted_zone_name }}"
          UniversityShortName: "{{ short_name }}"
          AltName: "{{ bypass }}"
          AppSecurityGroupId: "{{ security_stack.stack_outputs.AppServerSecurityGroup }}"
          ElbSecurityGroupId: "{{ security_stack.stack_outputs.ElbSecurityGroup }}"
          BaseAMI: "{{ base_ami }}"
          SSLCertificateARN: "arn:aws:acm:us-east-1:489515563883:certificate/22bea6d7-b4f1-4096-be08-196c591c3e72"
        tags:
          Stack: "Open-edX-{{ full_name }}-AppServers"
          Project: "openedx"
      register: "app_stack"


    - name: set variables for server ips
      set_fact:
        edxapp: "{{ app_stack.stack_outputs.EdxAppIp }}"
        mongo1: "{{ data_stack.stack_outputs.MongoPrimaryIp }}"
        mongo2: "{{ data_stack.stack_outputs.MongoSecondaryIp }}"
        common: "{{ data_stack.stack_outputs.CommonServerIp }}"
        env_source: "/home/ubuntu/env.sh"
        env_yml: "/home/ubuntu/env.yml"

    - name: delete file if it already exists
      file:
        dest: "{{ env_source }}"
        state: absent

    - name: delete file if it already exists
      file:
        dest: "{{ env_yml }}"
        state: absent

    - name: create file
      file:
        dest: "{{ env_source }}"
        state: touch

    - name: create file
      file:
        dest: "{{ env_yml }}"
        state: touch


    - blockinfile:
        dest: "{{ env_source }}"
        block:  |
          export DOMAIN={{ DOMAIN }}
          export PREVIEWURL={{ PREVIEWURL }}
          export S3STORAGEBUCKET={{ S3STORAGEBUCKET }}
          export EDXAPP_AWS_ACCESS_KEY_ID={{ EDXAPP_AWS_ACCESS_KEY_ID }}
          export EDXAPP_AWS_SECRET_ACCESS_KEY={{ EDXAPP_AWS_SECRET_ACCESS_KEY }}
          export EMAIL_HOST_USER={{ EMAIL_HOST_USER }}
          export EMAIL_HOST_PASSWORD={{ EMAIL_HOST_PASSWORD }}
          export APP={{ edxapp }}
          export MONGO1={{ mongo1 }}
          export MONGO2={{ mongo2 }}
          export COMMON={{ common }}
          export ELASTIC={{ common }}
          export RABBIT={{ common }}
          export RDS={{ rds_stack.stack_outputs.RdsEndpointAddress }}

          # MySQL
          export MYSQL_ADMIN_USER={{ MYSQL_ADMIN_USER }}
          export MYSQL_ADMIN_PASSWORD={{ MYSQL_ADMIN_PASSWORD }}

          export COMMON_MYSQL_ADMIN_PASS={{ COMMON_MYSQL_ADMIN_PASS }}
          export COMMON_MYSQL_MIGRATE_PASS={{ COMMON_MYSQL_MIGRATE_PASS }}
          export COMMON_MYSQL_READ_ONLY_PASS={{ COMMON_MYSQL_READ_ONLY_PASS }}

          # see: https://github.com/edx/xqueue/blob/master/xqueue/aws_settings.py#L52
          export DB_MIGRATION_USER={{ COMMON_MYSQL_MIGRATE_USER }}
          export DB_MIGRATION_PASS={{ COMMON_MYSQL_MIGRATE_PASS }}

          export EDXAPP_MYSQL_PASSWORD={{ EDXAPP_MYSQL_PASSWORD }}
          export EDXAPP_MYSQL_PASSWORD_READ_ONLY={{ EDXAPP_MYSQL_PASSWORD_READ_ONLY }}
          export EDXAPP_MYSQL_PASSWORD_ADMIN={{ EDXAPP_MYSQL_PASSWORD_ADMIN }}

          export XQUEUE_MYSQL_PASSWORD={{ XQUEUE_MYSQL_PASSWORD }}

          # MongoDB
          export MONGO_ADMIN_PASSWORD={{ MONGO_ADMIN_PASSWORD }}
          export EDXAPP_MONGO_PASSWORD={{ EDXAPP_MONGO_PASSWORD }}
          export FORUM_MONGO_PASSWORD={{ FORUM_MONGO_PASSWORD }}

        insertafter: EOF

    - blockinfile:
        dest: "{{ env_yml }}"
        block: |
          DOMAIN: {{ DOMAIN }}
          PREVIEWURL: {{ PREVIEWURL }}
          S3STORAGEBUCKET: {{ S3STORAGEBUCKET }}
          EDXAPP_AWS_ACCESS_KEY_ID: {{ EDXAPP_AWS_ACCESS_KEY_ID }}
          EDXAPP_AWS_SECRET_ACCESS_KEY: {{ EDXAPP_AWS_SECRET_ACCESS_KEY }}
          APP: {{ edxapp }}
          MONGO1: {{ mongo1 }}
          MONGO2: {{ mongo2 }}
          COMMON: {{ common }}
          ELASTIC: {{ common }}
          RABBIT: {{ common }}
          RDS: {{ rds_stack.stack_outputs.RdsEndpointAddress }}
        insertafter: EOF


    - add_host:
        name: "{{ edxapp }}"
        groups: nonlocal

    - add_host:
        name: "{{ mongo1 }}"
        groups: nonlocal

    - add_host:
        name: "{{ mongo2 }}"
        groups: nonlocal

    - add_host:
        name: "{{ common }}"
        groups: nonlocal

    - name: Wait for SSH to mongo1 to come up
      wait_for: host={{ mongo1 }} port=22 timeout=320 state=started

    - name: Wait for SSH to mongo2 to come up
      wait_for: host={{ mongo2 }} port=22 timeout=320 state=started

    - name: Wait for SSH to common to come up
      wait_for: host={{ common }} port=22 timeout=320 state=started

    - name: Wait for SSH to edxapp to come up
      wait_for: host={{ edxapp }} port=22 delay=30 timeout=320 state=started


    - name: set variable for new relic license key
      set_fact:
        NEWRELIC_LICENSE_KEY: "{{ NEWRELIC_LICENSE_KEY }}"


- name: Update /etc/hosts on data/app servers
  hosts: nonlocal
  become: true
  vars:
    mongo1: "{{ hostvars['localhost']['mongo1'] }}"
    mongo2: "{{ hostvars['localhost']['mongo2'] }}"
    common: "{{ hostvars['localhost']['common'] }}"
  tasks:

    - name: Update /etc/hosts
      blockinfile:
        dest: /etc/hosts
        block: |
          {{ mongo1 }} mongo1
          {{ mongo2 }} mongo2
          {{ common }} elastic rabbit
        insertafter: "127.0.0.1 localhost"


- name: install and configure New Relic Infrastructure
  hosts: nonlocal
  become: true
  vars:
    software_key_prefix: "openedx-{{ short_name }}.{{ hosted_zone_minus_period }}"
    environment_name: dev
    NEWRELIC_LICENSE_KEY: "{{ hostvars['localhost']['NEWRELIC_LICENSE_KEY'] }}"
  roles:
    - newrelic-infra-unizin


- name: reboot data/app servers
  hosts: nonlocal
  become: true
  vars:
    ansible_ssh_private_key_file: "/home/ubuntu/openedx-staging.pem"
  tasks:
    - name: reboot server
      shell: sleep 2 && shutdown -r now "Ansible triggered reboot"
      async: 1
      poll: 0
      ignore_errors: true

    - name: wait for server to come back
      local_action: wait_for host={{ inventory_hostname }} state=started delay=5 timeout=30

...
